// Universal Message Format Types - Auto-generated by ts-rs
// Generated from Rust definitions in src/universal/

// Main message system
export type { Message } from './UniversalMessage';
export type { UserContentPart } from './UserContentPart';
export type { AssistantContentPart } from './AssistantContentPart';
export type { ToolContentPart } from './ToolContentPart';

// Citation system
export type { Citation } from './Citation';
export type { CitationPosition } from './CitationPosition';
export type { CitationSource } from './CitationSource';
export type { SourceType } from './SourceType';

// Provider configuration
export type { ProviderMessagePartConfig } from './ProviderMessagePartConfig';
export type { AnthropicConfig } from './AnthropicConfig';
export type { OpenAIConfig } from './OpenAIConfig';
export type { GoogleConfig } from './GoogleConfig';
export type { BedrockConfig } from './BedrockConfig';
export type { ReasoningEffort } from './ReasoningEffort';
export type { CacheControlEphemeral } from './CacheControlEphemeral';
export type { CacheTtl } from './CacheTtl';

// Supporting types
export type { ImageDetail } from './ImageDetail';
export type { ToolResultContent } from './ToolResultContent';
export type { SearchResultItem } from './SearchResultItem';
export type { WebSearchResultItem } from './WebSearchResultItem';
export type { FileData } from './FileData';
export type { Base64Data } from './Base64Data';

// Example usage and type helpers
import type { Message, ProviderMessagePartConfig, UserContentPart, Citation } from './index';

// Example: Create a message with multi-provider config and citations
export const createExampleMessage = (): Message => ({
  role: "user",
  content: [
    {
      type: "text",
      text: "Analyze this document and provide citations.",
      citations: [
        {
          cited_text: "important finding",
          position: {
            type: "char_range",
            start: 100,
            end: 200
          },
          source: {
            url: "https://example.com",
            title: "Research Paper",
            document_title: null,
            document_index: null,
            license: null,
            source_type: "document"
          }
        }
      ],
      provider_config: {
        anthropic: {
          cache_control: {
            ttl: "1h"
          },
          extra: null
        },
        openai: {
          reasoning_effort: "high",
          audio_voice: null,
          extra: null
        },
        google: null,
        bedrock: null,
        other: null
      }
    }
  ],
  provider_config: null
});

// Type guards for content parts
export const isTextContent = (content: UserContentPart): content is Extract<UserContentPart, { type: "text" }> => {
  return content.type === "text";
};

export const isImageContent = (content: UserContentPart): content is Extract<UserContentPart, { type: "image" }> => {
  return content.type === "image";
};

export const isDocumentContent = (content: UserContentPart): content is Extract<UserContentPart, { type: "document" }> => {
  return content.type === "document";
};

export const isAudioContent = (content: UserContentPart): content is Extract<UserContentPart, { type: "audio" }> => {
  return content.type === "audio";
};