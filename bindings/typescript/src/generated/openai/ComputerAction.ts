// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ActionType } from "./ActionType";
import type { Button } from "./Button";
import type { Coordinate } from "./Coordinate";
import type { WebSearchSource } from "./WebSearchSource";

/**
 * A click action.
 *
 *
 * A double click action.
 *
 *
 * A drag action.
 *
 *
 * A collection of keypresses the model would like to perform.
 *
 *
 * A mouse move action.
 *
 *
 * A screenshot action.
 *
 *
 * A scroll action.
 *
 *
 * An action to type in text.
 *
 *
 * A wait action.
 *
 *
 * An object describing the specific action taken in this web search call.
 * Includes details on how the model used the web (search, open_page, find).
 *
 *
 * Action type "search" - Performs a web search query.
 *
 *
 * Action type "open_page" - Opens a specific URL from search results.
 *
 *
 * Action type "find": Searches for a pattern within a loaded page.
 *
 *
 * Execute a shell command on the server.
 */
export type ComputerAction = { 
/**
 * Indicates which mouse button was pressed during the click. One of `left`, `right`,
 * `wheel`, `back`, or `forward`.
 */
button: Button | null, 
/**
 * Specifies the event type. For a click action, this property is
 * always set to `click`.
 *
 *
 * Specifies the event type. For a double click action, this property is
 * always set to `double_click`.
 *
 *
 * Specifies the event type. For a drag action, this property is
 * always set to `drag`.
 *
 *
 * Specifies the event type. For a keypress action, this property is
 * always set to `keypress`.
 *
 *
 * Specifies the event type. For a move action, this property is
 * always set to `move`.
 *
 *
 * Specifies the event type. For a screenshot action, this property is
 * always set to `screenshot`.
 *
 *
 * Specifies the event type. For a scroll action, this property is
 * always set to `scroll`.
 *
 *
 * Specifies the event type. For a type action, this property is
 * always set to `type`.
 *
 *
 * Specifies the event type. For a wait action, this property is
 * always set to `wait`.
 *
 *
 * The action type.
 *
 *
 * The type of the local shell action. Always `exec`.
 */
type: ActionType, 
/**
 * The x-coordinate where the click occurred.
 *
 *
 * The x-coordinate where the double click occurred.
 *
 *
 * The x-coordinate to move to.
 *
 *
 * The x-coordinate where the scroll occurred.
 */
x: bigint | null, 
/**
 * The y-coordinate where the click occurred.
 *
 *
 * The y-coordinate where the double click occurred.
 *
 *
 * The y-coordinate to move to.
 *
 *
 * The y-coordinate where the scroll occurred.
 */
y: bigint | null, 
/**
 * An array of coordinates representing the path of the drag action. Coordinates will appear
 * as an array
 * of objects, eg
 * ```json
 * [
 * { "x": 100, "y": 200 },
 * { "x": 200, "y": 300 }
 * ]
 * ```
 */
path: Array<Coordinate> | null, 
/**
 * The combination of keys the model is requesting to be pressed. This is an
 * array of strings, each representing a key.
 */
keys: Array<string> | null, 
/**
 * The horizontal scroll distance.
 */
scroll_x: bigint | null, 
/**
 * The vertical scroll distance.
 */
scroll_y: bigint | null, 
/**
 * The text to type.
 */
text: string | null, 
/**
 * The search query.
 */
query: string | null, 
/**
 * The sources used in the search.
 */
sources: Array<WebSearchSource> | null, 
/**
 * The URL opened by the model.
 *
 *
 * The URL of the page searched for the pattern.
 */
url: string | null, 
/**
 * The pattern or text to search for within the page.
 */
pattern: string | null, 
/**
 * The command to run.
 */
command: Array<string> | null, 
/**
 * Environment variables to set for the command.
 */
env: { [key in string]?: string } | null, timeout_ms: bigint | null, user: string | null, working_directory: string | null, };
