// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { CodeInterpreterOutput } from "./CodeInterpreterOutput";
import type { ComputerAction } from "./ComputerAction";
import type { ComputerCallSafetyCheckParam } from "./ComputerCallSafetyCheckParam";
import type { ComputerToolCallSafetyCheck } from "./ComputerToolCallSafetyCheck";
import type { FunctionCallItemStatus } from "./FunctionCallItemStatus";
import type { InputItemContent } from "./InputItemContent";
import type { InputItemRole } from "./InputItemRole";
import type { InputItemType } from "./InputItemType";
import type { McpListToolsTool } from "./McpListToolsTool";
import type { Result } from "./Result";
import type { SummaryText } from "./SummaryText";

/**
 * A list of one or many input items to the model, containing
 * different content types.
 *
 *
 * A message input to the model with a role indicating instruction following
 * hierarchy. Instructions given with the `developer` or `system` role take
 * precedence over instructions given with the `user` role. Messages with the
 * `assistant` role are presumed to have been generated by the model in previous
 * interactions.
 *
 *
 * An item representing part of the context for the response to be
 * generated by the model. Can contain text, images, and audio inputs,
 * as well as previous assistant responses and tool call outputs.
 *
 *
 * Content item used to generate a response.
 *
 *
 * A message input to the model with a role indicating instruction following
 * hierarchy. Instructions given with the `developer` or `system` role take
 * precedence over instructions given with the `user` role.
 *
 *
 * An output message from the model.
 *
 *
 * The results of a file search tool call. See the
 * [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more
 * information.
 *
 *
 * A tool call to a computer use tool. See the
 * [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more
 * information.
 *
 *
 * The output of a computer tool call.
 *
 * The results of a web search tool call. See the
 * [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more
 * information.
 *
 *
 * A tool call to run a function. See the
 * [function calling guide](https://platform.openai.com/docs/guides/function-calling) for
 * more information.
 *
 *
 * The output of a function tool call.
 *
 * A description of the chain of thought used by a reasoning model while generating
 * a response. Be sure to include these items in your `input` to the Responses API
 * for subsequent turns of a conversation if you are manually
 * [managing context](https://platform.openai.com/docs/guides/conversation-state).
 *
 *
 * An image generation request made by the model.
 *
 *
 * A tool call to run code.
 *
 *
 * A tool call to run a command on the local shell.
 *
 *
 * The output of a local shell tool call.
 *
 *
 * A list of tools available on an MCP server.
 *
 *
 * A request for human approval of a tool invocation.
 *
 *
 * A response to an MCP approval request.
 *
 *
 * An invocation of a tool on an MCP server.
 *
 *
 * The output of a custom tool call from your code, being sent back to the model.
 *
 *
 * A call to a custom tool created by the model.
 *
 *
 * An internal identifier for an item to reference.
 */
export type InputItem = { 
/**
 * Text, image, or audio input to the model, used to generate a response.
 * Can also contain previous assistant responses.
 *
 *
 * The content of the output message.
 *
 *
 * Reasoning text content.
 */
content: InputItemContent | null, 
/**
 * The role of the message input. One of `user`, `assistant`, `system`, or
 * `developer`.
 *
 *
 * The role of the message input. One of `user`, `system`, or `developer`.
 *
 *
 * The role of the output message. Always `assistant`.
 */
role: InputItemRole | null, 
/**
 * The type of the message input. Always `message`.
 *
 *
 * The type of the message input. Always set to `message`.
 *
 *
 * The type of the output message. Always `message`.
 *
 *
 * The type of the file search tool call. Always `file_search_call`.
 *
 *
 * The type of the computer call. Always `computer_call`.
 *
 * The type of the computer tool call output. Always `computer_call_output`.
 *
 * The type of the web search tool call. Always `web_search_call`.
 *
 *
 * The type of the function tool call. Always `function_call`.
 *
 *
 * The type of the function tool call output. Always `function_call_output`.
 *
 * The type of the object. Always `reasoning`.
 *
 *
 * The type of the image generation call. Always `image_generation_call`.
 *
 *
 * The type of the code interpreter tool call. Always `code_interpreter_call`.
 *
 *
 * The type of the local shell call. Always `local_shell_call`.
 *
 *
 * The type of the local shell tool call output. Always `local_shell_call_output`.
 *
 *
 * The type of the item. Always `mcp_list_tools`.
 *
 *
 * The type of the item. Always `mcp_approval_request`.
 *
 *
 * The type of the item. Always `mcp_approval_response`.
 *
 *
 * The type of the item. Always `mcp_call`.
 *
 *
 * The type of the custom tool call output. Always `custom_tool_call_output`.
 *
 *
 * The type of the custom tool call. Always `custom_tool_call`.
 */
type: InputItemType | null, 
/**
 * The status of item. One of `in_progress`, `completed`, or
 * `incomplete`. Populated when items are returned via API.
 *
 *
 * The status of the message input. One of `in_progress`, `completed`, or
 * `incomplete`. Populated when input items are returned via API.
 *
 *
 * The status of the file search tool call. One of `in_progress`,
 * `searching`, `incomplete` or `failed`,
 *
 *
 * The status of the item. One of `in_progress`, `completed`, or
 * `incomplete`. Populated when items are returned via API.
 *
 *
 * The status of the web search tool call.
 *
 *
 * The status of the image generation call.
 *
 *
 * The status of the code interpreter tool call. Valid values are `in_progress`,
 * `completed`, `incomplete`, `interpreting`, and `failed`.
 *
 *
 * The status of the local shell call.
 */
status: FunctionCallItemStatus | null, 
/**
 * The unique ID of the output message.
 *
 *
 * The unique ID of the file search tool call.
 *
 *
 * The unique ID of the computer call.
 *
 * The unique ID of the web search tool call.
 *
 *
 * The unique ID of the function tool call.
 *
 *
 * The unique identifier of the reasoning content.
 *
 *
 * The unique ID of the image generation call.
 *
 *
 * The unique ID of the code interpreter tool call.
 *
 *
 * The unique ID of the local shell call.
 *
 *
 * The unique ID of the local shell tool call generated by the model.
 *
 *
 * The unique ID of the list.
 *
 *
 * The unique ID of the approval request.
 *
 *
 * The unique ID of the tool call.
 *
 *
 * The unique ID of the custom tool call output in the OpenAI platform.
 *
 *
 * The unique ID of the custom tool call in the OpenAI platform.
 *
 *
 * The ID of the item to reference.
 */
id: string | null, 
/**
 * The queries used to search for files.
 */
queries: Array<string> | null, results: Array<Result> | null, 
/**
 * An object describing the specific action taken in this web search call.
 * Includes details on how the model used the web (search, open_page, find).
 */
action: ComputerAction | null, 
/**
 * An identifier used when responding to the tool call with output.
 *
 *
 * The ID of the computer tool call that produced the output.
 *
 * The unique ID of the function tool call generated by the model.
 *
 *
 * The unique ID of the function tool call generated by the model.
 *
 * The unique ID of the local shell tool call generated by the model.
 *
 *
 * The call ID, used to map this custom tool call output to a custom tool call.
 *
 *
 * An identifier used to map this custom tool call to a tool call output.
 */
call_id: any, 
/**
 * The pending safety checks for the computer call.
 */
pending_safety_checks: Array<ComputerToolCallSafetyCheck> | null, acknowledged_safety_checks: Array<ComputerCallSafetyCheckParam> | null, 
/**
 * A JSON string of the output of the local shell tool call.
 *
 *
 * The output from the custom tool call generated by your code.
 */
output: string | null, 
/**
 * A JSON string of the arguments to pass to the function.
 *
 *
 * A JSON string of arguments for the tool.
 *
 *
 * A JSON string of the arguments passed to the tool.
 */
arguments: string | null, 
/**
 * The name of the function to run.
 *
 *
 * The name of the tool to run.
 *
 *
 * The name of the tool that was run.
 *
 *
 * The name of the custom tool being called.
 */
name: string | null, encrypted_content: string | null, 
/**
 * Reasoning summary content.
 */
summary: Array<SummaryText> | null, result: string | null, code: string | null, 
/**
 * The ID of the container used to run the code.
 */
container_id: string | null, outputs: Array<CodeInterpreterOutput> | null, error: string | null, 
/**
 * The label of the MCP server.
 *
 *
 * The label of the MCP server making the request.
 *
 *
 * The label of the MCP server running the tool.
 */
server_label: string | null, 
/**
 * The tools available on the server.
 */
tools: Array<McpListToolsTool> | null, 
/**
 * The ID of the approval request being answered.
 */
approval_request_id: string | null, 
/**
 * Whether the request was approved.
 */
approve: boolean | null, reason: string | null, request_id: any, 
/**
 * The input for the custom tool call generated by the model.
 */
input: string | null, };
